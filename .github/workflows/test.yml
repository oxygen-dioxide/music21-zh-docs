on:
  workflow_dispatch:
    inputs: {}

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: 
          - windows-latest
          - windows-11-arm
          #- macos-13
          #- macos-15
          - ubuntu-latest
          - ubuntu-24.04-arm
        
        python-version: ['3.10', '3.11', '3.12', '3.13']
        musescore:
          - main-version: "3"
            apt-package: "musescore3"
        exclude:
          - os: windows-11-arm
            python-version: '3.10'
          - os: windows-11-arm
            python-version: '3.11'
          - os: windows-11-arm
            python-version: '3.12'

    steps:
    - uses: actions/checkout@v1

    - name: install python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '${{ matrix.python-version }}'

    - name: Install C++ Build Tools
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      run: |
        choco install visualstudio2022buildtools
        choco install ninja

    - name: install musescore (windows)
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      run: choco install musescore --version=${{ matrix.musescore.main-version }}

    - name: install musescore (macos)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-15'
      run: |
        brew tap homebrew/cask-versions
        brew install --cask musescore3
    
    - name: install musescore (ubuntu)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
      run: |
        sudo apt-get update
        sudo apt-get install ${{ matrix.musescore.apt-package }} -y

    - name: install python requirements
      run: pip install -r requirements.txt
    
    - name: configure music21 (windows)
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      run: python test/configurem21_windows.py --musescore-version ${{ matrix.musescore.main-version }}

    #在本仓库的ipynb文件中，大部分代码块应该能正常运行，
    #但是有些代码块用于演示错误的代码，因此需要在测试时排除
    #这些代码块用 tag expected_error 标注
    - name: test
      shell: pwsh
      run: |
        $failed = $false
        ls userguide/*.ipynb | foreach { 
          echo $_
          jupyter nbconvert --to python --execute $_ --TagRemovePreprocessor.enabled=True --TagRemovePreprocessor.remove_cell_tags expected_error
          $exitCode = $LASTEXITCODE
          if ($exitCode -ne 0) {
              $failed = $true
          }
        }
        if ($failed) {
          Write-Error "One or more Notebooks failed to execute."
          exit 1
        }
