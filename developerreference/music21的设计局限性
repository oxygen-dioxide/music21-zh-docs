[原文链接](http://web.mit.edu/music21/doc/developerReference/startingOver.html)

你是一个开发者。你可能讨厌Python，或者讨厌music21。也可能觉得music21在开发的当时很强大，但是现在是时候从头开始开发一个新系统了。

考虑到[第二系统效应](https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E7%B3%BB%E7%B5%B1%E6%95%88%E6%87%89)，我不打算推翻music21的架构以开发一个全新的替代品。这件事并不适合由我来做。

但是如果你感兴趣，以下是我认为我在设计music21时犯下的一些失误，供新系统的设计者参考：

1. 大部分对象应该是不可变的。流`Stream`可能做不到，但是音高`Pitch`、变音符号`Accidental`、时值`Duration`等对象应该不可变。这样它们将支持散列运算与判等`==`，在python和大多数其他编程语言中皆是如此。但是，目前music21的现状是：流比较的是对象的引用，而音符比较的是对象的值。如果你还不清楚两者的区别，请先自己在编程实践中体会，有经验了再来设计你的系统。music21在这方面很糟糕。
2. 由于第一点，对象和位点应该分别存储，并将它们作为单独的复合对象返回。这将减少90%的深度复制`deepcopy`。
3. Humdrum使用`-`而不是`b`作为降调符号，认为`b`可能会与音名`B`冲突。我在music21中借鉴了这一设计。事实证明这并不是大问题。
4. 请遵循里氏替换原则（在对象继承中，如果一个函数支持对父类进行操作，则也应支持以相同的方式对子类进行操作，即使这个函数不了解这个子类）。违反这一规定的情况在音乐领域随处可见，这一直是一个问题，因为计算机需要更好地推断类型。
5. 使用较少的属性，除非它们计算速度很快，并且永远不要让属性产生副作用。现代IDE不断查询所有属性以查看其中可能包含的内容。这就是为什么 `.flat` 必须变成 `.flatten()`。
6. 保持工具包的核心简洁轻量，鼓励更多功能以附加组件的形式出现，而不是全部内置。
7. 不要试图将你的音乐学家大脑可以想象到的标准音乐的每一个例外都进行编码。请将它们放入`.editorial`或其他特殊用途属性中。
8. 每个音高`Pitch`对象都要有变音符号。在music21中，一个没有变音符号的音符，其`accidental`可能是`Accidental(‘natural’)`，也可能是`None`。这引发了很多混乱。

可能还有更多，我想到了再写上 —— Michael Scott Asato Cuthbert，2022年10月。